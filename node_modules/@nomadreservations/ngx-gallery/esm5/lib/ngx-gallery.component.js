/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, EventEmitter, HostBinding, HostListener, Input, Output, ViewChild } from '@angular/core';
import { NgxGalleryHelperService } from './ngx-gallery-helper.service';
import { NgxGalleryImageComponent } from './ngx-gallery-image.component';
import { NgxGalleryLayout } from './ngx-gallery-layout.model';
import { NgxGalleryOptions } from './ngx-gallery-options.model';
import { NgxGalleryOrderedImage } from './ngx-gallery-ordered-image.model';
import { NgxGalleryPreviewComponent } from './ngx-gallery-preview.component';
import { NgxGalleryThumbnailsComponent } from './ngx-gallery-thumbnails.component';
var NgxGalleryComponent = /** @class */ (function () {
    function NgxGalleryComponent(myElement) {
        this.myElement = myElement;
        this.imagesReady = new EventEmitter();
        // tslint:disable-next-line: no-output-native
        this.change = new EventEmitter();
        this.previewOpen = new EventEmitter();
        this.previewClose = new EventEmitter();
        this.previewChange = new EventEmitter();
        this.oldImagesLength = 0;
        this.selectedIndex = 0;
        this.breakpoint = undefined;
        this.prevBreakpoint = undefined;
    }
    /**
     * @return {?}
     */
    NgxGalleryComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.options = this.options.map((/**
         * @param {?} opt
         * @return {?}
         */
        function (opt) { return new NgxGalleryOptions(opt); }));
        this.sortOptions();
        this.setBreakpoint();
        this.setOptions();
        this.checkFullWidth();
        if (this.currentOptions) {
            this.selectedIndex = (/** @type {?} */ (this.currentOptions.startIndex));
        }
    };
    /**
     * @return {?}
     */
    NgxGalleryComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        if ((this.images !== undefined && this.images.length !== this.oldImagesLength) || this.images !== this.oldImages) {
            this.oldImagesLength = this.images.length;
            this.oldImages = this.images;
            this.setOptions();
            this.setImages();
            if (this.images && this.images.length) {
                this.imagesReady.emit();
            }
            if (this.image) {
                this.image.reset((/** @type {?} */ (this.currentOptions.startIndex)));
            }
            if (this.currentOptions.thumbnailsAutoHide && this.currentOptions.thumbnails && this.images.length <= 1) {
                this.currentOptions.thumbnails = false;
                this.currentOptions.imageArrows = false;
            }
            this.resetThumbnails();
        }
    };
    /**
     * @return {?}
     */
    NgxGalleryComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.checkFullWidth();
    };
    /**
     * @return {?}
     */
    NgxGalleryComponent.prototype.onResize = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.setBreakpoint();
        if (this.prevBreakpoint !== this.breakpoint) {
            this.setOptions();
            this.resetThumbnails();
        }
        if (this.currentOptions && this.currentOptions.fullWidth) {
            if (this.fullWidthTimeout) {
                clearTimeout(this.fullWidthTimeout);
            }
            this.fullWidthTimeout = setTimeout((/**
             * @return {?}
             */
            function () {
                _this.checkFullWidth();
            }), 200);
        }
    };
    /**
     * @return {?}
     */
    NgxGalleryComponent.prototype.getImageHeight = /**
     * @return {?}
     */
    function () {
        return this.currentOptions && this.currentOptions.thumbnails ? this.currentOptions.imagePercent + '%' : '100%';
    };
    /**
     * @return {?}
     */
    NgxGalleryComponent.prototype.getThumbnailsHeight = /**
     * @return {?}
     */
    function () {
        if (this.currentOptions && this.currentOptions.image) {
            return 'calc(' + this.currentOptions.thumbnailsPercent + '% - ' + this.currentOptions.thumbnailsMargin + 'px)';
        }
        else {
            return '100%';
        }
    };
    /**
     * @return {?}
     */
    NgxGalleryComponent.prototype.getThumbnailsMarginTop = /**
     * @return {?}
     */
    function () {
        if (this.currentOptions && this.currentOptions.layout === NgxGalleryLayout.ThumbnailsBottom) {
            return this.currentOptions.thumbnailsMargin + 'px';
        }
        else {
            return '0px';
        }
    };
    /**
     * @return {?}
     */
    NgxGalleryComponent.prototype.getThumbnailsMarginBottom = /**
     * @return {?}
     */
    function () {
        if (this.currentOptions && this.currentOptions.layout === NgxGalleryLayout.ThumbnailsTop) {
            return this.currentOptions.thumbnailsMargin + 'px';
        }
        else {
            return '0px';
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    NgxGalleryComponent.prototype.openPreview = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        if (this.currentOptions.previewCustom) {
            this.currentOptions.previewCustom(index);
        }
        else {
            this.previewEnabled = true;
            this.preview.open(index);
        }
    };
    /**
     * @return {?}
     */
    NgxGalleryComponent.prototype.onPreviewOpen = /**
     * @return {?}
     */
    function () {
        this.previewOpen.emit();
        if (this.image && this.image.autoPlay) {
            this.image.stopAutoPlay();
        }
    };
    /**
     * @return {?}
     */
    NgxGalleryComponent.prototype.onPreviewClose = /**
     * @return {?}
     */
    function () {
        this.previewEnabled = false;
        this.previewClose.emit();
        if (this.image && this.image.autoPlay) {
            this.image.startAutoPlay();
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    NgxGalleryComponent.prototype.selectFromImage = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.select(index);
    };
    /**
     * @param {?} index
     * @return {?}
     */
    NgxGalleryComponent.prototype.selectFromThumbnails = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.select(index);
        if (this.currentOptions &&
            this.currentOptions.thumbnails &&
            this.currentOptions.preview &&
            (!this.currentOptions.image || this.currentOptions.thumbnailsRemainingCount)) {
            this.openPreview(this.selectedIndex);
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    NgxGalleryComponent.prototype.show = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.select(index);
    };
    /**
     * @return {?}
     */
    NgxGalleryComponent.prototype.showNext = /**
     * @return {?}
     */
    function () {
        this.image.showNext();
    };
    /**
     * @return {?}
     */
    NgxGalleryComponent.prototype.showPrev = /**
     * @return {?}
     */
    function () {
        this.image.showPrev();
    };
    /**
     * @return {?}
     */
    NgxGalleryComponent.prototype.canShowNext = /**
     * @return {?}
     */
    function () {
        if (this.images && this.currentOptions) {
            return this.currentOptions.imageInfinityMove || this.selectedIndex < this.images.length - 1 ? true : false;
        }
        else {
            return false;
        }
    };
    /**
     * @return {?}
     */
    NgxGalleryComponent.prototype.canShowPrev = /**
     * @return {?}
     */
    function () {
        if (this.images && this.currentOptions) {
            return this.currentOptions.imageInfinityMove || this.selectedIndex > 0 ? true : false;
        }
        else {
            return false;
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    NgxGalleryComponent.prototype.previewSelect = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.previewChange.emit({ index: index, image: this.images[index] });
    };
    /**
     * @return {?}
     */
    NgxGalleryComponent.prototype.moveThumbnailsRight = /**
     * @return {?}
     */
    function () {
        this.thubmnails.moveRight();
    };
    /**
     * @return {?}
     */
    NgxGalleryComponent.prototype.moveThumbnailsLeft = /**
     * @return {?}
     */
    function () {
        this.thubmnails.moveLeft();
    };
    /**
     * @return {?}
     */
    NgxGalleryComponent.prototype.canMoveThumbnailsRight = /**
     * @return {?}
     */
    function () {
        return this.thubmnails.canMoveRight();
    };
    /**
     * @return {?}
     */
    NgxGalleryComponent.prototype.canMoveThumbnailsLeft = /**
     * @return {?}
     */
    function () {
        return this.thubmnails.canMoveLeft();
    };
    /**
     * @private
     * @return {?}
     */
    NgxGalleryComponent.prototype.resetThumbnails = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.thubmnails) {
            this.thubmnails.reset((/** @type {?} */ (this.currentOptions.startIndex)));
        }
    };
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    NgxGalleryComponent.prototype.select = /**
     * @private
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.selectedIndex = index;
        this.change.emit({
            index: index,
            image: this.images[index]
        });
    };
    /**
     * @private
     * @return {?}
     */
    NgxGalleryComponent.prototype.checkFullWidth = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.currentOptions && this.currentOptions.fullWidth) {
            this.width = document.body.clientWidth + 'px';
            this.left = -(document.body.clientWidth - this.myElement.nativeElement.parentNode.innerWidth) / 2 + 'px';
        }
    };
    /**
     * @private
     * @return {?}
     */
    NgxGalleryComponent.prototype.setImages = /**
     * @private
     * @return {?}
     */
    function () {
        this.smallImages = this.images.map((/**
         * @param {?} img
         * @return {?}
         */
        function (img) { return (/** @type {?} */ (img.small)); }));
        this.mediumImages = this.images.map((/**
         * @param {?} img
         * @param {?} i
         * @return {?}
         */
        function (img, i) {
            return new NgxGalleryOrderedImage({
                src: img.medium,
                index: i
            });
        }));
        this.bigImages = this.images.map((/**
         * @param {?} img
         * @return {?}
         */
        function (img) { return (/** @type {?} */ (img.big)); }));
        this.descriptions = this.images.map((/**
         * @param {?} img
         * @return {?}
         */
        function (img) { return (/** @type {?} */ (img.description)); }));
        this.links = this.images.map((/**
         * @param {?} img
         * @return {?}
         */
        function (img) { return (/** @type {?} */ (img.url)); }));
        this.labels = this.images.map((/**
         * @param {?} img
         * @return {?}
         */
        function (img) { return (/** @type {?} */ (img.label)); }));
    };
    /**
     * @private
     * @return {?}
     */
    NgxGalleryComponent.prototype.setBreakpoint = /**
     * @private
     * @return {?}
     */
    function () {
        this.prevBreakpoint = this.breakpoint;
        /** @type {?} */
        var breakpoints;
        if (typeof window !== 'undefined') {
            breakpoints = this.options.filter((/**
             * @param {?} opt
             * @return {?}
             */
            function (opt) { return opt.breakpoint >= window.innerWidth; })).map((/**
             * @param {?} opt
             * @return {?}
             */
            function (opt) { return opt.breakpoint; }));
        }
        if (breakpoints && breakpoints.length) {
            this.breakpoint = breakpoints.pop();
        }
        else {
            this.breakpoint = undefined;
        }
    };
    /**
     * @private
     * @return {?}
     */
    NgxGalleryComponent.prototype.sortOptions = /**
     * @private
     * @return {?}
     */
    function () {
        this.options = tslib_1.__spread(this.options.filter((/**
         * @param {?} a
         * @return {?}
         */
        function (a) { return a.breakpoint === undefined; })), this.options.filter((/**
         * @param {?} a
         * @return {?}
         */
        function (a) { return a.breakpoint !== undefined; })).sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) { return b.breakpoint - a.breakpoint; })));
    };
    /**
     * @private
     * @return {?}
     */
    NgxGalleryComponent.prototype.setOptions = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.currentOptions = new NgxGalleryOptions({});
        this.options
            .filter((/**
         * @param {?} opt
         * @return {?}
         */
        function (opt) { return opt.breakpoint === undefined || opt.breakpoint >= _this.breakpoint; }))
            .map((/**
         * @param {?} opt
         * @return {?}
         */
        function (opt) { return _this.combineOptions(_this.currentOptions, opt); }));
        this.width = (/** @type {?} */ (this.currentOptions.width));
        this.height = (/** @type {?} */ (this.currentOptions.height));
    };
    /**
     * @private
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    NgxGalleryComponent.prototype.combineOptions = /**
     * @private
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    function (first, second) {
        Object.keys(second).map((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return (first[val] = second[val] !== undefined ? second[val] : first[val]); }));
    };
    NgxGalleryComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-gallery',
                    template: "\n    <div class=\"ngx-gallery-layout {{ currentOptions?.layout }}\">\n      <ngx-gallery-image\n        *ngIf=\"currentOptions?.image\"\n        [style.height]=\"getImageHeight()\"\n        [images]=\"mediumImages\"\n        [clickable]=\"currentOptions?.preview\"\n        [selectedIndex]=\"selectedIndex\"\n        [arrows]=\"currentOptions?.imageArrows\"\n        [arrowsAutoHide]=\"currentOptions?.imageArrowsAutoHide\"\n        [arrowPrevIcon]=\"currentOptions?.arrowPrevIcon\"\n        [arrowNextIcon]=\"currentOptions?.arrowNextIcon\"\n        [swipe]=\"currentOptions?.imageSwipe\"\n        [animation]=\"currentOptions?.imageAnimation\"\n        [size]=\"currentOptions?.imageSize\"\n        [autoPlay]=\"currentOptions?.imageAutoPlay\"\n        [autoPlayInterval]=\"currentOptions?.imageAutoPlayInterval\"\n        [autoPlayPauseOnHover]=\"currentOptions?.imageAutoPlayPauseOnHover\"\n        [infinityMove]=\"currentOptions?.imageInfinityMove\"\n        [lazyLoading]=\"currentOptions?.lazyLoading\"\n        [actions]=\"currentOptions?.imageActions\"\n        [descriptions]=\"descriptions\"\n        [showDescription]=\"currentOptions?.imageDescription\"\n        [bullets]=\"currentOptions?.imageBullets\"\n        (clicked)=\"openPreview($event)\"\n        (activeChange)=\"selectFromImage($event)\"\n      ></ngx-gallery-image>\n\n      <ngx-gallery-thumbnails\n        *ngIf=\"currentOptions?.thumbnails\"\n        [style.marginTop]=\"getThumbnailsMarginTop()\"\n        [style.marginBottom]=\"getThumbnailsMarginBottom()\"\n        [style.height]=\"getThumbnailsHeight()\"\n        [images]=\"smallImages\"\n        [links]=\"currentOptions?.thumbnailsAsLinks ? links : []\"\n        [labels]=\"labels\"\n        [linkTarget]=\"currentOptions?.linkTarget\"\n        [selectedIndex]=\"selectedIndex\"\n        [columns]=\"currentOptions?.thumbnailsColumns\"\n        [rows]=\"currentOptions?.thumbnailsRows\"\n        [margin]=\"currentOptions?.thumbnailMargin\"\n        [arrows]=\"currentOptions?.thumbnailsArrows\"\n        [arrowsAutoHide]=\"currentOptions?.thumbnailsArrowsAutoHide\"\n        [arrowPrevIcon]=\"currentOptions?.arrowPrevIcon\"\n        [arrowNextIcon]=\"currentOptions?.arrowNextIcon\"\n        [clickable]=\"currentOptions?.image || currentOptions?.preview\"\n        [swipe]=\"currentOptions?.thumbnailsSwipe\"\n        [size]=\"currentOptions?.thumbnailSize\"\n        [moveSize]=\"currentOptions?.thumbnailsMoveSize\"\n        [order]=\"currentOptions?.thumbnailsOrder\"\n        [remainingCount]=\"currentOptions?.thumbnailsRemainingCount\"\n        [lazyLoading]=\"currentOptions?.lazyLoading\"\n        [actions]=\"currentOptions?.thumbnailActions\"\n        (activeChange)=\"selectFromThumbnails($event)\"\n      ></ngx-gallery-thumbnails>\n\n      <ngx-gallery-preview\n        [images]=\"bigImages\"\n        [descriptions]=\"descriptions\"\n        [showDescription]=\"currentOptions?.previewDescription\"\n        [arrowPrevIcon]=\"currentOptions?.arrowPrevIcon\"\n        [arrowNextIcon]=\"currentOptions?.arrowNextIcon\"\n        [closeIcon]=\"currentOptions?.closeIcon\"\n        [fullscreenIcon]=\"currentOptions?.fullscreenIcon\"\n        [spinnerIcon]=\"currentOptions?.spinnerIcon\"\n        [arrows]=\"currentOptions?.previewArrows\"\n        [arrowsAutoHide]=\"currentOptions?.previewArrowsAutoHide\"\n        [swipe]=\"currentOptions?.previewSwipe\"\n        [fullscreen]=\"currentOptions?.previewFullscreen\"\n        [forceFullscreen]=\"currentOptions?.previewForceFullscreen\"\n        [closeOnClick]=\"currentOptions?.previewCloseOnClick\"\n        [closeOnEsc]=\"currentOptions?.previewCloseOnEsc\"\n        [keyboardNavigation]=\"currentOptions?.previewKeyboardNavigation\"\n        [animation]=\"currentOptions?.previewAnimation\"\n        [autoPlay]=\"currentOptions?.previewAutoPlay\"\n        [autoPlayInterval]=\"currentOptions?.previewAutoPlayInterval\"\n        [autoPlayPauseOnHover]=\"currentOptions?.previewAutoPlayPauseOnHover\"\n        [infinityMove]=\"currentOptions?.previewInfinityMove\"\n        [zoom]=\"currentOptions?.previewZoom\"\n        [zoomStep]=\"currentOptions?.previewZoomStep\"\n        [zoomMax]=\"currentOptions?.previewZoomMax\"\n        [zoomMin]=\"currentOptions?.previewZoomMin\"\n        [zoomInIcon]=\"currentOptions?.zoomInIcon\"\n        [zoomOutIcon]=\"currentOptions?.zoomOutIcon\"\n        [actions]=\"currentOptions?.actions\"\n        [rotate]=\"currentOptions?.previewRotate\"\n        [rotateLeftIcon]=\"currentOptions?.rotateLeftIcon\"\n        [rotateRightIcon]=\"currentOptions?.rotateRightIcon\"\n        [download]=\"currentOptions?.previewDownload\"\n        [downloadIcon]=\"currentOptions?.downloadIcon\"\n        [bullets]=\"currentOptions?.previewBullets\"\n        (closed)=\"onPreviewClose()\"\n        (opened)=\"onPreviewOpen()\"\n        (activeChange)=\"previewSelect($event)\"\n        [class.ngx-gallery-active]=\"previewEnabled\"\n      ></ngx-gallery-preview>\n    </div>\n  ",
                    providers: [NgxGalleryHelperService],
                    styles: [":host{display:inline-block}:host>*{float:left}:host ::ng-deep *{box-sizing:border-box}:host ::ng-deep .ngx-gallery-icon{color:#fff;font-size:25px;position:absolute;z-index:2000;display:inline-block}:host ::ng-deep .ngx-gallery-icon .ngx-gallery-icon-content{display:block}:host ::ng-deep .ngx-gallery-clickable{cursor:pointer}:host ::ng-deep .ngx-gallery-icons-wrapper .ngx-gallery-icon{position:relative;margin-right:5px;margin-top:5px;font-size:20px;cursor:pointer}:host ::ng-deep .ngx-gallery-icons-wrapper{float:right}:host .ngx-gallery-layout{width:100%;height:100%;display:flex;flex-direction:column}:host .ngx-gallery-layout.thumbnails-top ngx-gallery-image{order:2}:host .ngx-gallery-layout.thumbnails-top ngx-gallery-thumbnails{order:1}:host .ngx-gallery-layout.thumbnails-bottom ngx-gallery-image{order:1}:host .ngx-gallery-layout.thumbnails-bottom ngx-gallery-thumbnails{order:2}"]
                }] }
    ];
    /** @nocollapse */
    NgxGalleryComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    NgxGalleryComponent.propDecorators = {
        options: [{ type: Input }],
        images: [{ type: Input }],
        imagesReady: [{ type: Output }],
        change: [{ type: Output }],
        previewOpen: [{ type: Output }],
        previewClose: [{ type: Output }],
        previewChange: [{ type: Output }],
        preview: [{ type: ViewChild, args: [NgxGalleryPreviewComponent, { static: false },] }],
        image: [{ type: ViewChild, args: [NgxGalleryImageComponent, { static: false },] }],
        thubmnails: [{ type: ViewChild, args: [NgxGalleryThumbnailsComponent, { static: false },] }],
        width: [{ type: HostBinding, args: ['style.width',] }],
        height: [{ type: HostBinding, args: ['style.height',] }],
        left: [{ type: HostBinding, args: ['style.left',] }],
        onResize: [{ type: HostListener, args: ['window:resize',] }]
    };
    return NgxGalleryComponent;
}());
export { NgxGalleryComponent };
if (false) {
    /** @type {?} */
    NgxGalleryComponent.prototype.options;
    /** @type {?} */
    NgxGalleryComponent.prototype.images;
    /** @type {?} */
    NgxGalleryComponent.prototype.imagesReady;
    /** @type {?} */
    NgxGalleryComponent.prototype.change;
    /** @type {?} */
    NgxGalleryComponent.prototype.previewOpen;
    /** @type {?} */
    NgxGalleryComponent.prototype.previewClose;
    /** @type {?} */
    NgxGalleryComponent.prototype.previewChange;
    /** @type {?} */
    NgxGalleryComponent.prototype.smallImages;
    /** @type {?} */
    NgxGalleryComponent.prototype.mediumImages;
    /** @type {?} */
    NgxGalleryComponent.prototype.bigImages;
    /** @type {?} */
    NgxGalleryComponent.prototype.descriptions;
    /** @type {?} */
    NgxGalleryComponent.prototype.links;
    /** @type {?} */
    NgxGalleryComponent.prototype.labels;
    /** @type {?} */
    NgxGalleryComponent.prototype.oldImages;
    /** @type {?} */
    NgxGalleryComponent.prototype.oldImagesLength;
    /** @type {?} */
    NgxGalleryComponent.prototype.selectedIndex;
    /** @type {?} */
    NgxGalleryComponent.prototype.previewEnabled;
    /** @type {?} */
    NgxGalleryComponent.prototype.currentOptions;
    /**
     * @type {?}
     * @private
     */
    NgxGalleryComponent.prototype.breakpoint;
    /**
     * @type {?}
     * @private
     */
    NgxGalleryComponent.prototype.prevBreakpoint;
    /**
     * @type {?}
     * @private
     */
    NgxGalleryComponent.prototype.fullWidthTimeout;
    /** @type {?} */
    NgxGalleryComponent.prototype.preview;
    /** @type {?} */
    NgxGalleryComponent.prototype.image;
    /** @type {?} */
    NgxGalleryComponent.prototype.thubmnails;
    /** @type {?} */
    NgxGalleryComponent.prototype.width;
    /** @type {?} */
    NgxGalleryComponent.prototype.height;
    /** @type {?} */
    NgxGalleryComponent.prototype.left;
    /**
     * @type {?}
     * @private
     */
    NgxGalleryComponent.prototype.myElement;
}
//# sourceMappingURL=data:application/json;base64,