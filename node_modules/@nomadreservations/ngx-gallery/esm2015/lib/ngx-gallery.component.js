/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, HostBinding, HostListener, Input, Output, ViewChild } from '@angular/core';
import { NgxGalleryHelperService } from './ngx-gallery-helper.service';
import { NgxGalleryImageComponent } from './ngx-gallery-image.component';
import { NgxGalleryLayout } from './ngx-gallery-layout.model';
import { NgxGalleryOptions } from './ngx-gallery-options.model';
import { NgxGalleryOrderedImage } from './ngx-gallery-ordered-image.model';
import { NgxGalleryPreviewComponent } from './ngx-gallery-preview.component';
import { NgxGalleryThumbnailsComponent } from './ngx-gallery-thumbnails.component';
export class NgxGalleryComponent {
    /**
     * @param {?} myElement
     */
    constructor(myElement) {
        this.myElement = myElement;
        this.imagesReady = new EventEmitter();
        // tslint:disable-next-line: no-output-native
        this.change = new EventEmitter();
        this.previewOpen = new EventEmitter();
        this.previewClose = new EventEmitter();
        this.previewChange = new EventEmitter();
        this.oldImagesLength = 0;
        this.selectedIndex = 0;
        this.breakpoint = undefined;
        this.prevBreakpoint = undefined;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.options = this.options.map((/**
         * @param {?} opt
         * @return {?}
         */
        opt => new NgxGalleryOptions(opt)));
        this.sortOptions();
        this.setBreakpoint();
        this.setOptions();
        this.checkFullWidth();
        if (this.currentOptions) {
            this.selectedIndex = (/** @type {?} */ (this.currentOptions.startIndex));
        }
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        if ((this.images !== undefined && this.images.length !== this.oldImagesLength) || this.images !== this.oldImages) {
            this.oldImagesLength = this.images.length;
            this.oldImages = this.images;
            this.setOptions();
            this.setImages();
            if (this.images && this.images.length) {
                this.imagesReady.emit();
            }
            if (this.image) {
                this.image.reset((/** @type {?} */ (this.currentOptions.startIndex)));
            }
            if (this.currentOptions.thumbnailsAutoHide && this.currentOptions.thumbnails && this.images.length <= 1) {
                this.currentOptions.thumbnails = false;
                this.currentOptions.imageArrows = false;
            }
            this.resetThumbnails();
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.checkFullWidth();
    }
    /**
     * @return {?}
     */
    onResize() {
        this.setBreakpoint();
        if (this.prevBreakpoint !== this.breakpoint) {
            this.setOptions();
            this.resetThumbnails();
        }
        if (this.currentOptions && this.currentOptions.fullWidth) {
            if (this.fullWidthTimeout) {
                clearTimeout(this.fullWidthTimeout);
            }
            this.fullWidthTimeout = setTimeout((/**
             * @return {?}
             */
            () => {
                this.checkFullWidth();
            }), 200);
        }
    }
    /**
     * @return {?}
     */
    getImageHeight() {
        return this.currentOptions && this.currentOptions.thumbnails ? this.currentOptions.imagePercent + '%' : '100%';
    }
    /**
     * @return {?}
     */
    getThumbnailsHeight() {
        if (this.currentOptions && this.currentOptions.image) {
            return 'calc(' + this.currentOptions.thumbnailsPercent + '% - ' + this.currentOptions.thumbnailsMargin + 'px)';
        }
        else {
            return '100%';
        }
    }
    /**
     * @return {?}
     */
    getThumbnailsMarginTop() {
        if (this.currentOptions && this.currentOptions.layout === NgxGalleryLayout.ThumbnailsBottom) {
            return this.currentOptions.thumbnailsMargin + 'px';
        }
        else {
            return '0px';
        }
    }
    /**
     * @return {?}
     */
    getThumbnailsMarginBottom() {
        if (this.currentOptions && this.currentOptions.layout === NgxGalleryLayout.ThumbnailsTop) {
            return this.currentOptions.thumbnailsMargin + 'px';
        }
        else {
            return '0px';
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    openPreview(index) {
        if (this.currentOptions.previewCustom) {
            this.currentOptions.previewCustom(index);
        }
        else {
            this.previewEnabled = true;
            this.preview.open(index);
        }
    }
    /**
     * @return {?}
     */
    onPreviewOpen() {
        this.previewOpen.emit();
        if (this.image && this.image.autoPlay) {
            this.image.stopAutoPlay();
        }
    }
    /**
     * @return {?}
     */
    onPreviewClose() {
        this.previewEnabled = false;
        this.previewClose.emit();
        if (this.image && this.image.autoPlay) {
            this.image.startAutoPlay();
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    selectFromImage(index) {
        this.select(index);
    }
    /**
     * @param {?} index
     * @return {?}
     */
    selectFromThumbnails(index) {
        this.select(index);
        if (this.currentOptions &&
            this.currentOptions.thumbnails &&
            this.currentOptions.preview &&
            (!this.currentOptions.image || this.currentOptions.thumbnailsRemainingCount)) {
            this.openPreview(this.selectedIndex);
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    show(index) {
        this.select(index);
    }
    /**
     * @return {?}
     */
    showNext() {
        this.image.showNext();
    }
    /**
     * @return {?}
     */
    showPrev() {
        this.image.showPrev();
    }
    /**
     * @return {?}
     */
    canShowNext() {
        if (this.images && this.currentOptions) {
            return this.currentOptions.imageInfinityMove || this.selectedIndex < this.images.length - 1 ? true : false;
        }
        else {
            return false;
        }
    }
    /**
     * @return {?}
     */
    canShowPrev() {
        if (this.images && this.currentOptions) {
            return this.currentOptions.imageInfinityMove || this.selectedIndex > 0 ? true : false;
        }
        else {
            return false;
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    previewSelect(index) {
        this.previewChange.emit({ index, image: this.images[index] });
    }
    /**
     * @return {?}
     */
    moveThumbnailsRight() {
        this.thubmnails.moveRight();
    }
    /**
     * @return {?}
     */
    moveThumbnailsLeft() {
        this.thubmnails.moveLeft();
    }
    /**
     * @return {?}
     */
    canMoveThumbnailsRight() {
        return this.thubmnails.canMoveRight();
    }
    /**
     * @return {?}
     */
    canMoveThumbnailsLeft() {
        return this.thubmnails.canMoveLeft();
    }
    /**
     * @private
     * @return {?}
     */
    resetThumbnails() {
        if (this.thubmnails) {
            this.thubmnails.reset((/** @type {?} */ (this.currentOptions.startIndex)));
        }
    }
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    select(index) {
        this.selectedIndex = index;
        this.change.emit({
            index,
            image: this.images[index]
        });
    }
    /**
     * @private
     * @return {?}
     */
    checkFullWidth() {
        if (this.currentOptions && this.currentOptions.fullWidth) {
            this.width = document.body.clientWidth + 'px';
            this.left = -(document.body.clientWidth - this.myElement.nativeElement.parentNode.innerWidth) / 2 + 'px';
        }
    }
    /**
     * @private
     * @return {?}
     */
    setImages() {
        this.smallImages = this.images.map((/**
         * @param {?} img
         * @return {?}
         */
        img => (/** @type {?} */ (img.small))));
        this.mediumImages = this.images.map((/**
         * @param {?} img
         * @param {?} i
         * @return {?}
         */
        (img, i) => new NgxGalleryOrderedImage({
            src: img.medium,
            index: i
        })));
        this.bigImages = this.images.map((/**
         * @param {?} img
         * @return {?}
         */
        img => (/** @type {?} */ (img.big))));
        this.descriptions = this.images.map((/**
         * @param {?} img
         * @return {?}
         */
        img => (/** @type {?} */ (img.description))));
        this.links = this.images.map((/**
         * @param {?} img
         * @return {?}
         */
        img => (/** @type {?} */ (img.url))));
        this.labels = this.images.map((/**
         * @param {?} img
         * @return {?}
         */
        img => (/** @type {?} */ (img.label))));
    }
    /**
     * @private
     * @return {?}
     */
    setBreakpoint() {
        this.prevBreakpoint = this.breakpoint;
        /** @type {?} */
        let breakpoints;
        if (typeof window !== 'undefined') {
            breakpoints = this.options.filter((/**
             * @param {?} opt
             * @return {?}
             */
            opt => opt.breakpoint >= window.innerWidth)).map((/**
             * @param {?} opt
             * @return {?}
             */
            opt => opt.breakpoint));
        }
        if (breakpoints && breakpoints.length) {
            this.breakpoint = breakpoints.pop();
        }
        else {
            this.breakpoint = undefined;
        }
    }
    /**
     * @private
     * @return {?}
     */
    sortOptions() {
        this.options = [
            ...this.options.filter((/**
             * @param {?} a
             * @return {?}
             */
            a => a.breakpoint === undefined)),
            ...this.options.filter((/**
             * @param {?} a
             * @return {?}
             */
            a => a.breakpoint !== undefined)).sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            (a, b) => b.breakpoint - a.breakpoint))
        ];
    }
    /**
     * @private
     * @return {?}
     */
    setOptions() {
        this.currentOptions = new NgxGalleryOptions({});
        this.options
            .filter((/**
         * @param {?} opt
         * @return {?}
         */
        opt => opt.breakpoint === undefined || opt.breakpoint >= this.breakpoint))
            .map((/**
         * @param {?} opt
         * @return {?}
         */
        opt => this.combineOptions(this.currentOptions, opt)));
        this.width = (/** @type {?} */ (this.currentOptions.width));
        this.height = (/** @type {?} */ (this.currentOptions.height));
    }
    /**
     * @private
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    combineOptions(first, second) {
        Object.keys(second).map((/**
         * @param {?} val
         * @return {?}
         */
        val => (first[val] = second[val] !== undefined ? second[val] : first[val])));
    }
}
NgxGalleryComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-gallery',
                template: `
    <div class="ngx-gallery-layout {{ currentOptions?.layout }}">
      <ngx-gallery-image
        *ngIf="currentOptions?.image"
        [style.height]="getImageHeight()"
        [images]="mediumImages"
        [clickable]="currentOptions?.preview"
        [selectedIndex]="selectedIndex"
        [arrows]="currentOptions?.imageArrows"
        [arrowsAutoHide]="currentOptions?.imageArrowsAutoHide"
        [arrowPrevIcon]="currentOptions?.arrowPrevIcon"
        [arrowNextIcon]="currentOptions?.arrowNextIcon"
        [swipe]="currentOptions?.imageSwipe"
        [animation]="currentOptions?.imageAnimation"
        [size]="currentOptions?.imageSize"
        [autoPlay]="currentOptions?.imageAutoPlay"
        [autoPlayInterval]="currentOptions?.imageAutoPlayInterval"
        [autoPlayPauseOnHover]="currentOptions?.imageAutoPlayPauseOnHover"
        [infinityMove]="currentOptions?.imageInfinityMove"
        [lazyLoading]="currentOptions?.lazyLoading"
        [actions]="currentOptions?.imageActions"
        [descriptions]="descriptions"
        [showDescription]="currentOptions?.imageDescription"
        [bullets]="currentOptions?.imageBullets"
        (clicked)="openPreview($event)"
        (activeChange)="selectFromImage($event)"
      ></ngx-gallery-image>

      <ngx-gallery-thumbnails
        *ngIf="currentOptions?.thumbnails"
        [style.marginTop]="getThumbnailsMarginTop()"
        [style.marginBottom]="getThumbnailsMarginBottom()"
        [style.height]="getThumbnailsHeight()"
        [images]="smallImages"
        [links]="currentOptions?.thumbnailsAsLinks ? links : []"
        [labels]="labels"
        [linkTarget]="currentOptions?.linkTarget"
        [selectedIndex]="selectedIndex"
        [columns]="currentOptions?.thumbnailsColumns"
        [rows]="currentOptions?.thumbnailsRows"
        [margin]="currentOptions?.thumbnailMargin"
        [arrows]="currentOptions?.thumbnailsArrows"
        [arrowsAutoHide]="currentOptions?.thumbnailsArrowsAutoHide"
        [arrowPrevIcon]="currentOptions?.arrowPrevIcon"
        [arrowNextIcon]="currentOptions?.arrowNextIcon"
        [clickable]="currentOptions?.image || currentOptions?.preview"
        [swipe]="currentOptions?.thumbnailsSwipe"
        [size]="currentOptions?.thumbnailSize"
        [moveSize]="currentOptions?.thumbnailsMoveSize"
        [order]="currentOptions?.thumbnailsOrder"
        [remainingCount]="currentOptions?.thumbnailsRemainingCount"
        [lazyLoading]="currentOptions?.lazyLoading"
        [actions]="currentOptions?.thumbnailActions"
        (activeChange)="selectFromThumbnails($event)"
      ></ngx-gallery-thumbnails>

      <ngx-gallery-preview
        [images]="bigImages"
        [descriptions]="descriptions"
        [showDescription]="currentOptions?.previewDescription"
        [arrowPrevIcon]="currentOptions?.arrowPrevIcon"
        [arrowNextIcon]="currentOptions?.arrowNextIcon"
        [closeIcon]="currentOptions?.closeIcon"
        [fullscreenIcon]="currentOptions?.fullscreenIcon"
        [spinnerIcon]="currentOptions?.spinnerIcon"
        [arrows]="currentOptions?.previewArrows"
        [arrowsAutoHide]="currentOptions?.previewArrowsAutoHide"
        [swipe]="currentOptions?.previewSwipe"
        [fullscreen]="currentOptions?.previewFullscreen"
        [forceFullscreen]="currentOptions?.previewForceFullscreen"
        [closeOnClick]="currentOptions?.previewCloseOnClick"
        [closeOnEsc]="currentOptions?.previewCloseOnEsc"
        [keyboardNavigation]="currentOptions?.previewKeyboardNavigation"
        [animation]="currentOptions?.previewAnimation"
        [autoPlay]="currentOptions?.previewAutoPlay"
        [autoPlayInterval]="currentOptions?.previewAutoPlayInterval"
        [autoPlayPauseOnHover]="currentOptions?.previewAutoPlayPauseOnHover"
        [infinityMove]="currentOptions?.previewInfinityMove"
        [zoom]="currentOptions?.previewZoom"
        [zoomStep]="currentOptions?.previewZoomStep"
        [zoomMax]="currentOptions?.previewZoomMax"
        [zoomMin]="currentOptions?.previewZoomMin"
        [zoomInIcon]="currentOptions?.zoomInIcon"
        [zoomOutIcon]="currentOptions?.zoomOutIcon"
        [actions]="currentOptions?.actions"
        [rotate]="currentOptions?.previewRotate"
        [rotateLeftIcon]="currentOptions?.rotateLeftIcon"
        [rotateRightIcon]="currentOptions?.rotateRightIcon"
        [download]="currentOptions?.previewDownload"
        [downloadIcon]="currentOptions?.downloadIcon"
        [bullets]="currentOptions?.previewBullets"
        (closed)="onPreviewClose()"
        (opened)="onPreviewOpen()"
        (activeChange)="previewSelect($event)"
        [class.ngx-gallery-active]="previewEnabled"
      ></ngx-gallery-preview>
    </div>
  `,
                providers: [NgxGalleryHelperService],
                styles: [":host{display:inline-block}:host>*{float:left}:host ::ng-deep *{box-sizing:border-box}:host ::ng-deep .ngx-gallery-icon{color:#fff;font-size:25px;position:absolute;z-index:2000;display:inline-block}:host ::ng-deep .ngx-gallery-icon .ngx-gallery-icon-content{display:block}:host ::ng-deep .ngx-gallery-clickable{cursor:pointer}:host ::ng-deep .ngx-gallery-icons-wrapper .ngx-gallery-icon{position:relative;margin-right:5px;margin-top:5px;font-size:20px;cursor:pointer}:host ::ng-deep .ngx-gallery-icons-wrapper{float:right}:host .ngx-gallery-layout{width:100%;height:100%;display:flex;flex-direction:column}:host .ngx-gallery-layout.thumbnails-top ngx-gallery-image{order:2}:host .ngx-gallery-layout.thumbnails-top ngx-gallery-thumbnails{order:1}:host .ngx-gallery-layout.thumbnails-bottom ngx-gallery-image{order:1}:host .ngx-gallery-layout.thumbnails-bottom ngx-gallery-thumbnails{order:2}"]
            }] }
];
/** @nocollapse */
NgxGalleryComponent.ctorParameters = () => [
    { type: ElementRef }
];
NgxGalleryComponent.propDecorators = {
    options: [{ type: Input }],
    images: [{ type: Input }],
    imagesReady: [{ type: Output }],
    change: [{ type: Output }],
    previewOpen: [{ type: Output }],
    previewClose: [{ type: Output }],
    previewChange: [{ type: Output }],
    preview: [{ type: ViewChild, args: [NgxGalleryPreviewComponent, { static: false },] }],
    image: [{ type: ViewChild, args: [NgxGalleryImageComponent, { static: false },] }],
    thubmnails: [{ type: ViewChild, args: [NgxGalleryThumbnailsComponent, { static: false },] }],
    width: [{ type: HostBinding, args: ['style.width',] }],
    height: [{ type: HostBinding, args: ['style.height',] }],
    left: [{ type: HostBinding, args: ['style.left',] }],
    onResize: [{ type: HostListener, args: ['window:resize',] }]
};
if (false) {
    /** @type {?} */
    NgxGalleryComponent.prototype.options;
    /** @type {?} */
    NgxGalleryComponent.prototype.images;
    /** @type {?} */
    NgxGalleryComponent.prototype.imagesReady;
    /** @type {?} */
    NgxGalleryComponent.prototype.change;
    /** @type {?} */
    NgxGalleryComponent.prototype.previewOpen;
    /** @type {?} */
    NgxGalleryComponent.prototype.previewClose;
    /** @type {?} */
    NgxGalleryComponent.prototype.previewChange;
    /** @type {?} */
    NgxGalleryComponent.prototype.smallImages;
    /** @type {?} */
    NgxGalleryComponent.prototype.mediumImages;
    /** @type {?} */
    NgxGalleryComponent.prototype.bigImages;
    /** @type {?} */
    NgxGalleryComponent.prototype.descriptions;
    /** @type {?} */
    NgxGalleryComponent.prototype.links;
    /** @type {?} */
    NgxGalleryComponent.prototype.labels;
    /** @type {?} */
    NgxGalleryComponent.prototype.oldImages;
    /** @type {?} */
    NgxGalleryComponent.prototype.oldImagesLength;
    /** @type {?} */
    NgxGalleryComponent.prototype.selectedIndex;
    /** @type {?} */
    NgxGalleryComponent.prototype.previewEnabled;
    /** @type {?} */
    NgxGalleryComponent.prototype.currentOptions;
    /**
     * @type {?}
     * @private
     */
    NgxGalleryComponent.prototype.breakpoint;
    /**
     * @type {?}
     * @private
     */
    NgxGalleryComponent.prototype.prevBreakpoint;
    /**
     * @type {?}
     * @private
     */
    NgxGalleryComponent.prototype.fullWidthTimeout;
    /** @type {?} */
    NgxGalleryComponent.prototype.preview;
    /** @type {?} */
    NgxGalleryComponent.prototype.image;
    /** @type {?} */
    NgxGalleryComponent.prototype.thubmnails;
    /** @type {?} */
    NgxGalleryComponent.prototype.width;
    /** @type {?} */
    NgxGalleryComponent.prototype.height;
    /** @type {?} */
    NgxGalleryComponent.prototype.left;
    /**
     * @type {?}
     * @private
     */
    NgxGalleryComponent.prototype.myElement;
}
//# sourceMappingURL=data:application/json;base64,