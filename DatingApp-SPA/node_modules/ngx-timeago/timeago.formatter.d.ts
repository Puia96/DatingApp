import { TimeagoIntl } from './timeago.intl';
import * as ɵngcc0 from '@angular/core';
export declare type Unit = 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'year';
export declare type Suffix = 'ago' | 'from now';
export declare type StringOrFn = ((value: number, millisDelta: number) => string) | string;
export declare type NumberArray = [string, string, string, string, string, string, string, string, string, string];
export declare abstract class TimeagoFormatter {
    abstract format(then: number): string;
}
export declare class TimeagoDefaultFormatter extends TimeagoFormatter {
    format(then: number): string;
    private parse(value, unit, suffix);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TimeagoDefaultFormatter, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<TimeagoDefaultFormatter>;
}
export declare class TimeagoCustomFormatter extends TimeagoFormatter {
    private intl;
    constructor(intl: TimeagoIntl);
    format(then: number): string;
    private parse(value, unit, suffix, now, then);
    /**
     * If the numbers array is present, format numbers with it,
     * otherwise just cast the number to a string and return it
    */
    private normalizeNumber(numbers, value);
    /**
     * Take a string or a function that takes number of days and returns a string
     * and provide a uniform API to create string parts
    */
    private normalizeFn(value, millisDelta, numbers?);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TimeagoCustomFormatter, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<TimeagoCustomFormatter>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZWFnby5mb3JtYXR0ZXIuZC50cyIsInNvdXJjZXMiOlsidGltZWFnby5mb3JtYXR0ZXIuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGltZWFnb0ludGwgfSBmcm9tICcuL3RpbWVhZ28uaW50bCc7XG5leHBvcnQgZGVjbGFyZSB0eXBlIFVuaXQgPSAnc2Vjb25kJyB8ICdtaW51dGUnIHwgJ2hvdXInIHwgJ2RheScgfCAnd2VlaycgfCAnbW9udGgnIHwgJ3llYXInO1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBTdWZmaXggPSAnYWdvJyB8ICdmcm9tIG5vdyc7XG5leHBvcnQgZGVjbGFyZSB0eXBlIFN0cmluZ09yRm4gPSAoKHZhbHVlOiBudW1iZXIsIG1pbGxpc0RlbHRhOiBudW1iZXIpID0+IHN0cmluZykgfCBzdHJpbmc7XG5leHBvcnQgZGVjbGFyZSB0eXBlIE51bWJlckFycmF5ID0gW3N0cmluZywgc3RyaW5nLCBzdHJpbmcsIHN0cmluZywgc3RyaW5nLCBzdHJpbmcsIHN0cmluZywgc3RyaW5nLCBzdHJpbmcsIHN0cmluZ107XG5leHBvcnQgZGVjbGFyZSBhYnN0cmFjdCBjbGFzcyBUaW1lYWdvRm9ybWF0dGVyIHtcbiAgICBhYnN0cmFjdCBmb3JtYXQodGhlbjogbnVtYmVyKTogc3RyaW5nO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVGltZWFnb0RlZmF1bHRGb3JtYXR0ZXIgZXh0ZW5kcyBUaW1lYWdvRm9ybWF0dGVyIHtcbiAgICBmb3JtYXQodGhlbjogbnVtYmVyKTogc3RyaW5nO1xuICAgIHByaXZhdGUgcGFyc2UodmFsdWUsIHVuaXQsIHN1ZmZpeCk7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBUaW1lYWdvQ3VzdG9tRm9ybWF0dGVyIGV4dGVuZHMgVGltZWFnb0Zvcm1hdHRlciB7XG4gICAgcHJpdmF0ZSBpbnRsO1xuICAgIGNvbnN0cnVjdG9yKGludGw6IFRpbWVhZ29JbnRsKTtcbiAgICBmb3JtYXQodGhlbjogbnVtYmVyKTogc3RyaW5nO1xuICAgIHByaXZhdGUgcGFyc2UodmFsdWUsIHVuaXQsIHN1ZmZpeCwgbm93LCB0aGVuKTtcbiAgICAvKipcbiAgICAgKiBJZiB0aGUgbnVtYmVycyBhcnJheSBpcyBwcmVzZW50LCBmb3JtYXQgbnVtYmVycyB3aXRoIGl0LFxuICAgICAqIG90aGVyd2lzZSBqdXN0IGNhc3QgdGhlIG51bWJlciB0byBhIHN0cmluZyBhbmQgcmV0dXJuIGl0XG4gICAgKi9cbiAgICBwcml2YXRlIG5vcm1hbGl6ZU51bWJlcihudW1iZXJzLCB2YWx1ZSk7XG4gICAgLyoqXG4gICAgICogVGFrZSBhIHN0cmluZyBvciBhIGZ1bmN0aW9uIHRoYXQgdGFrZXMgbnVtYmVyIG9mIGRheXMgYW5kIHJldHVybnMgYSBzdHJpbmdcbiAgICAgKiBhbmQgcHJvdmlkZSBhIHVuaWZvcm0gQVBJIHRvIGNyZWF0ZSBzdHJpbmcgcGFydHNcbiAgICAqL1xuICAgIHByaXZhdGUgbm9ybWFsaXplRm4odmFsdWUsIG1pbGxpc0RlbHRhLCBudW1iZXJzPyk7XG59XG4iXX0=