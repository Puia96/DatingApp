import { ElementRef, OnChanges, OnDestroy, ChangeDetectorRef } from '@angular/core';
import { Subject } from 'rxjs';
import { TimeagoClock } from './timeago.clock';
import { TimeagoFormatter } from './timeago.formatter';
import { TimeagoIntl } from './timeago.intl';
import * as ɵngcc0 from '@angular/core';
export declare class TimeagoDirective implements OnChanges, OnDestroy {
    private cd;
    private clock;
    private intlSubscription;
    private clockSubscription;
    /**
     * Emits on:
     * - Input change
     * - Intl change
     * - Clock tick
    */
    stateChanges: Subject<any>;
    /** The Date to display. An actual Date object or something that can be fed to new Date. */
    date: any;
    private _date;
    /** If the directive should update itself over time */
    live: boolean;
    private _live;
    constructor(intl: TimeagoIntl, cd: ChangeDetectorRef, formatter: TimeagoFormatter, element: ElementRef, clock: TimeagoClock);
    ngOnChanges(): void;
    setContent(node: any, content: string): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TimeagoDirective, [{ optional: true; }, null, null, null, null]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<TimeagoDirective, "[timeago]", ["timeago"], { "date": "date"; "live": "live"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZWFnby5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsidGltZWFnby5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgVGltZWFnb0Nsb2NrIH0gZnJvbSAnLi90aW1lYWdvLmNsb2NrJztcbmltcG9ydCB7IFRpbWVhZ29Gb3JtYXR0ZXIgfSBmcm9tICcuL3RpbWVhZ28uZm9ybWF0dGVyJztcbmltcG9ydCB7IFRpbWVhZ29JbnRsIH0gZnJvbSAnLi90aW1lYWdvLmludGwnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVGltZWFnb0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIGNkO1xuICAgIHByaXZhdGUgY2xvY2s7XG4gICAgcHJpdmF0ZSBpbnRsU3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgY2xvY2tTdWJzY3JpcHRpb247XG4gICAgLyoqXG4gICAgICogRW1pdHMgb246XG4gICAgICogLSBJbnB1dCBjaGFuZ2VcbiAgICAgKiAtIEludGwgY2hhbmdlXG4gICAgICogLSBDbG9jayB0aWNrXG4gICAgKi9cbiAgICBzdGF0ZUNoYW5nZXM6IFN1YmplY3Q8YW55PjtcbiAgICAvKiogVGhlIERhdGUgdG8gZGlzcGxheS4gQW4gYWN0dWFsIERhdGUgb2JqZWN0IG9yIHNvbWV0aGluZyB0aGF0IGNhbiBiZSBmZWQgdG8gbmV3IERhdGUuICovXG4gICAgZGF0ZTogYW55O1xuICAgIHByaXZhdGUgX2RhdGU7XG4gICAgLyoqIElmIHRoZSBkaXJlY3RpdmUgc2hvdWxkIHVwZGF0ZSBpdHNlbGYgb3ZlciB0aW1lICovXG4gICAgbGl2ZTogYm9vbGVhbjtcbiAgICBwcml2YXRlIF9saXZlO1xuICAgIGNvbnN0cnVjdG9yKGludGw6IFRpbWVhZ29JbnRsLCBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsIGZvcm1hdHRlcjogVGltZWFnb0Zvcm1hdHRlciwgZWxlbWVudDogRWxlbWVudFJlZiwgY2xvY2s6IFRpbWVhZ29DbG9jayk7XG4gICAgbmdPbkNoYW5nZXMoKTogdm9pZDtcbiAgICBzZXRDb250ZW50KG5vZGU6IGFueSwgY29udGVudDogc3RyaW5nKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuIl19