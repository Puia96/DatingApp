import { OnInit, OnChanges, EventEmitter, ElementRef, ChangeDetectorRef, SimpleChanges, Renderer } from '@angular/core';
import { SafeResourceUrl, SafeUrl, DomSanitizer, SafeStyle } from '@angular/platform-browser';
import { NgxGalleryAction } from '../ngx-gallery-action.model';
import { NgxGalleryHelperService } from '../ngx-gallery-helper.service';
import * as ɵngcc0 from '@angular/core';
export declare class NgxGalleryPreviewComponent implements OnInit, OnChanges {
    private sanitization;
    private elementRef;
    private helperService;
    private renderer;
    private changeDetectorRef;
    src: SafeUrl;
    srcIndex: number;
    description: string;
    showSpinner: boolean;
    positionLeft: number;
    positionTop: number;
    zoomValue: number;
    loading: boolean;
    rotateValue: number;
    index: number;
    images: string[] | SafeResourceUrl[];
    descriptions: string[];
    showDescription: boolean;
    arrows: boolean;
    arrowsAutoHide: boolean;
    swipe: boolean;
    fullscreen: boolean;
    forceFullscreen: boolean;
    closeOnClick: boolean;
    closeOnEsc: boolean;
    keyboardNavigation: boolean;
    arrowPrevIcon: string;
    arrowNextIcon: string;
    closeIcon: string;
    fullscreenIcon: string;
    spinnerIcon: string;
    autoPlay: boolean;
    autoPlayInterval: number;
    autoPlayPauseOnHover: boolean;
    infinityMove: boolean;
    zoom: boolean;
    zoomStep: number;
    zoomMax: number;
    zoomMin: number;
    zoomInIcon: string;
    zoomOutIcon: string;
    animation: boolean;
    actions: NgxGalleryAction[];
    rotate: boolean;
    rotateLeftIcon: string;
    rotateRightIcon: string;
    download: boolean;
    downloadIcon: string;
    bullets: string;
    onOpen: EventEmitter<any>;
    onClose: EventEmitter<any>;
    onActiveChange: EventEmitter<number>;
    previewImage: ElementRef;
    private isOpen;
    private timer;
    private initialX;
    private initialY;
    private initialLeft;
    private initialTop;
    private isMove;
    private keyDownListener;
    constructor(sanitization: DomSanitizer, elementRef: ElementRef, helperService: NgxGalleryHelperService, renderer: Renderer, changeDetectorRef: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    onMouseEnter(): void;
    onMouseLeave(): void;
    onKeyDown(e: any): void;
    open(index: number): void;
    close(): void;
    imageMouseEnter(): void;
    imageMouseLeave(): void;
    startAutoPlay(): void;
    stopAutoPlay(): void;
    showAtIndex(index: number): void;
    showNext(): boolean;
    showPrev(): void;
    canShowNext(): boolean;
    canShowPrev(): boolean;
    manageFullscreen(): void;
    getSafeUrl(image: string): SafeUrl;
    zoomIn(): void;
    zoomOut(): void;
    rotateLeft(): void;
    rotateRight(): void;
    getTransform(): SafeStyle;
    canZoomIn(): boolean;
    canZoomOut(): boolean;
    canDragOnZoom(): boolean;
    mouseDownHandler(e: any): void;
    mouseUpHandler(e: any): void;
    mouseMoveHandler(e: any): void;
    private getClientX;
    private getClientY;
    private resetPosition;
    private isKeyboardNext;
    private isKeyboardPrev;
    private isKeyboardEsc;
    private openFullscreen;
    private closeFullscreen;
    private isFullscreen;
    private show;
    private _show;
    private isLoaded;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxGalleryPreviewComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxGalleryPreviewComponent, "ngx-gallery-preview", never, { "arrows": "arrows"; "images": "images"; "descriptions": "descriptions"; "showDescription": "showDescription"; "arrowsAutoHide": "arrowsAutoHide"; "swipe": "swipe"; "fullscreen": "fullscreen"; "forceFullscreen": "forceFullscreen"; "closeOnClick": "closeOnClick"; "closeOnEsc": "closeOnEsc"; "keyboardNavigation": "keyboardNavigation"; "arrowPrevIcon": "arrowPrevIcon"; "arrowNextIcon": "arrowNextIcon"; "closeIcon": "closeIcon"; "fullscreenIcon": "fullscreenIcon"; "spinnerIcon": "spinnerIcon"; "autoPlay": "autoPlay"; "autoPlayInterval": "autoPlayInterval"; "autoPlayPauseOnHover": "autoPlayPauseOnHover"; "infinityMove": "infinityMove"; "zoom": "zoom"; "zoomStep": "zoomStep"; "zoomMax": "zoomMax"; "zoomMin": "zoomMin"; "zoomInIcon": "zoomInIcon"; "zoomOutIcon": "zoomOutIcon"; "animation": "animation"; "actions": "actions"; "rotate": "rotate"; "rotateLeftIcon": "rotateLeftIcon"; "rotateRightIcon": "rotateRightIcon"; "download": "download"; "downloadIcon": "downloadIcon"; "bullets": "bullets"; }, { "onOpen": "onOpen"; "onClose": "onClose"; "onActiveChange": "onActiveChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWdhbGxlcnktcHJldmlldy5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsibmd4LWdhbGxlcnktcHJldmlldy5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25Jbml0LCBPbkNoYW5nZXMsIEV2ZW50RW1pdHRlciwgRWxlbWVudFJlZiwgQ2hhbmdlRGV0ZWN0b3JSZWYsIFNpbXBsZUNoYW5nZXMsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTYWZlUmVzb3VyY2VVcmwsIFNhZmVVcmwsIERvbVNhbml0aXplciwgU2FmZVN0eWxlIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XHJcbmltcG9ydCB7IE5neEdhbGxlcnlBY3Rpb24gfSBmcm9tICcuLi9uZ3gtZ2FsbGVyeS1hY3Rpb24ubW9kZWwnO1xyXG5pbXBvcnQgeyBOZ3hHYWxsZXJ5SGVscGVyU2VydmljZSB9IGZyb20gJy4uL25neC1nYWxsZXJ5LWhlbHBlci5zZXJ2aWNlJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmd4R2FsbGVyeVByZXZpZXdDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XHJcbiAgICBwcml2YXRlIHNhbml0aXphdGlvbjtcclxuICAgIHByaXZhdGUgZWxlbWVudFJlZjtcclxuICAgIHByaXZhdGUgaGVscGVyU2VydmljZTtcclxuICAgIHByaXZhdGUgcmVuZGVyZXI7XHJcbiAgICBwcml2YXRlIGNoYW5nZURldGVjdG9yUmVmO1xyXG4gICAgc3JjOiBTYWZlVXJsO1xyXG4gICAgc3JjSW5kZXg6IG51bWJlcjtcclxuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XHJcbiAgICBzaG93U3Bpbm5lcjogYm9vbGVhbjtcclxuICAgIHBvc2l0aW9uTGVmdDogbnVtYmVyO1xyXG4gICAgcG9zaXRpb25Ub3A6IG51bWJlcjtcclxuICAgIHpvb21WYWx1ZTogbnVtYmVyO1xyXG4gICAgbG9hZGluZzogYm9vbGVhbjtcclxuICAgIHJvdGF0ZVZhbHVlOiBudW1iZXI7XHJcbiAgICBpbmRleDogbnVtYmVyO1xyXG4gICAgaW1hZ2VzOiBzdHJpbmdbXSB8IFNhZmVSZXNvdXJjZVVybFtdO1xyXG4gICAgZGVzY3JpcHRpb25zOiBzdHJpbmdbXTtcclxuICAgIHNob3dEZXNjcmlwdGlvbjogYm9vbGVhbjtcclxuICAgIGFycm93czogYm9vbGVhbjtcclxuICAgIGFycm93c0F1dG9IaWRlOiBib29sZWFuO1xyXG4gICAgc3dpcGU6IGJvb2xlYW47XHJcbiAgICBmdWxsc2NyZWVuOiBib29sZWFuO1xyXG4gICAgZm9yY2VGdWxsc2NyZWVuOiBib29sZWFuO1xyXG4gICAgY2xvc2VPbkNsaWNrOiBib29sZWFuO1xyXG4gICAgY2xvc2VPbkVzYzogYm9vbGVhbjtcclxuICAgIGtleWJvYXJkTmF2aWdhdGlvbjogYm9vbGVhbjtcclxuICAgIGFycm93UHJldkljb246IHN0cmluZztcclxuICAgIGFycm93TmV4dEljb246IHN0cmluZztcclxuICAgIGNsb3NlSWNvbjogc3RyaW5nO1xyXG4gICAgZnVsbHNjcmVlbkljb246IHN0cmluZztcclxuICAgIHNwaW5uZXJJY29uOiBzdHJpbmc7XHJcbiAgICBhdXRvUGxheTogYm9vbGVhbjtcclxuICAgIGF1dG9QbGF5SW50ZXJ2YWw6IG51bWJlcjtcclxuICAgIGF1dG9QbGF5UGF1c2VPbkhvdmVyOiBib29sZWFuO1xyXG4gICAgaW5maW5pdHlNb3ZlOiBib29sZWFuO1xyXG4gICAgem9vbTogYm9vbGVhbjtcclxuICAgIHpvb21TdGVwOiBudW1iZXI7XHJcbiAgICB6b29tTWF4OiBudW1iZXI7XHJcbiAgICB6b29tTWluOiBudW1iZXI7XHJcbiAgICB6b29tSW5JY29uOiBzdHJpbmc7XHJcbiAgICB6b29tT3V0SWNvbjogc3RyaW5nO1xyXG4gICAgYW5pbWF0aW9uOiBib29sZWFuO1xyXG4gICAgYWN0aW9uczogTmd4R2FsbGVyeUFjdGlvbltdO1xyXG4gICAgcm90YXRlOiBib29sZWFuO1xyXG4gICAgcm90YXRlTGVmdEljb246IHN0cmluZztcclxuICAgIHJvdGF0ZVJpZ2h0SWNvbjogc3RyaW5nO1xyXG4gICAgZG93bmxvYWQ6IGJvb2xlYW47XHJcbiAgICBkb3dubG9hZEljb246IHN0cmluZztcclxuICAgIGJ1bGxldHM6IHN0cmluZztcclxuICAgIG9uT3BlbjogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICBvbkNsb3NlOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIG9uQWN0aXZlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8bnVtYmVyPjtcclxuICAgIHByZXZpZXdJbWFnZTogRWxlbWVudFJlZjtcclxuICAgIHByaXZhdGUgaXNPcGVuO1xyXG4gICAgcHJpdmF0ZSB0aW1lcjtcclxuICAgIHByaXZhdGUgaW5pdGlhbFg7XHJcbiAgICBwcml2YXRlIGluaXRpYWxZO1xyXG4gICAgcHJpdmF0ZSBpbml0aWFsTGVmdDtcclxuICAgIHByaXZhdGUgaW5pdGlhbFRvcDtcclxuICAgIHByaXZhdGUgaXNNb3ZlO1xyXG4gICAgcHJpdmF0ZSBrZXlEb3duTGlzdGVuZXI7XHJcbiAgICBjb25zdHJ1Y3RvcihzYW5pdGl6YXRpb246IERvbVNhbml0aXplciwgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgaGVscGVyU2VydmljZTogTmd4R2FsbGVyeUhlbHBlclNlcnZpY2UsIHJlbmRlcmVyOiBSZW5kZXJlcjIsIGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZik7XHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xyXG4gICAgb25Nb3VzZUVudGVyKCk6IHZvaWQ7XHJcbiAgICBvbk1vdXNlTGVhdmUoKTogdm9pZDtcclxuICAgIG9uS2V5RG93bihlOiBhbnkpOiB2b2lkO1xyXG4gICAgb3BlbihpbmRleDogbnVtYmVyKTogdm9pZDtcclxuICAgIGNsb3NlKCk6IHZvaWQ7XHJcbiAgICBpbWFnZU1vdXNlRW50ZXIoKTogdm9pZDtcclxuICAgIGltYWdlTW91c2VMZWF2ZSgpOiB2b2lkO1xyXG4gICAgc3RhcnRBdXRvUGxheSgpOiB2b2lkO1xyXG4gICAgc3RvcEF1dG9QbGF5KCk6IHZvaWQ7XHJcbiAgICBzaG93QXRJbmRleChpbmRleDogbnVtYmVyKTogdm9pZDtcclxuICAgIHNob3dOZXh0KCk6IGJvb2xlYW47XHJcbiAgICBzaG93UHJldigpOiB2b2lkO1xyXG4gICAgY2FuU2hvd05leHQoKTogYm9vbGVhbjtcclxuICAgIGNhblNob3dQcmV2KCk6IGJvb2xlYW47XHJcbiAgICBtYW5hZ2VGdWxsc2NyZWVuKCk6IHZvaWQ7XHJcbiAgICBnZXRTYWZlVXJsKGltYWdlOiBzdHJpbmcpOiBTYWZlVXJsO1xyXG4gICAgem9vbUluKCk6IHZvaWQ7XHJcbiAgICB6b29tT3V0KCk6IHZvaWQ7XHJcbiAgICByb3RhdGVMZWZ0KCk6IHZvaWQ7XHJcbiAgICByb3RhdGVSaWdodCgpOiB2b2lkO1xyXG4gICAgZ2V0VHJhbnNmb3JtKCk6IFNhZmVTdHlsZTtcclxuICAgIGNhblpvb21JbigpOiBib29sZWFuO1xyXG4gICAgY2FuWm9vbU91dCgpOiBib29sZWFuO1xyXG4gICAgY2FuRHJhZ09uWm9vbSgpOiBib29sZWFuO1xyXG4gICAgbW91c2VEb3duSGFuZGxlcihlOiBhbnkpOiB2b2lkO1xyXG4gICAgbW91c2VVcEhhbmRsZXIoZTogYW55KTogdm9pZDtcclxuICAgIG1vdXNlTW92ZUhhbmRsZXIoZTogYW55KTogdm9pZDtcclxuICAgIHByaXZhdGUgZ2V0Q2xpZW50WDtcclxuICAgIHByaXZhdGUgZ2V0Q2xpZW50WTtcclxuICAgIHByaXZhdGUgcmVzZXRQb3NpdGlvbjtcclxuICAgIHByaXZhdGUgaXNLZXlib2FyZE5leHQ7XHJcbiAgICBwcml2YXRlIGlzS2V5Ym9hcmRQcmV2O1xyXG4gICAgcHJpdmF0ZSBpc0tleWJvYXJkRXNjO1xyXG4gICAgcHJpdmF0ZSBvcGVuRnVsbHNjcmVlbjtcclxuICAgIHByaXZhdGUgY2xvc2VGdWxsc2NyZWVuO1xyXG4gICAgcHJpdmF0ZSBpc0Z1bGxzY3JlZW47XHJcbiAgICBwcml2YXRlIHNob3c7XHJcbiAgICBwcml2YXRlIF9zaG93O1xyXG4gICAgcHJpdmF0ZSBpc0xvYWRlZDtcclxufVxyXG4iXX0=