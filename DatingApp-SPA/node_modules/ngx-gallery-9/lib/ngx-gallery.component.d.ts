import { OnInit, DoCheck, AfterViewInit, EventEmitter, ElementRef } from '@angular/core';
import { SafeResourceUrl } from '@angular/platform-browser';
import { NgxGalleryOptions } from './ngx-gallery-options';
import { NgxGalleryImage } from './ngx-gallery-image.model';
import { NgxGalleryOrderedImage } from './ngx-gallery-ordered-image.model';
import { NgxGalleryPreviewComponent } from './ngx-gallery-preview/ngx-gallery-preview.component';
import { NgxGalleryImageComponent } from './ngx-gallery-image/ngx-gallery-image.component';
import { NgxGalleryThumbnailsComponent } from './ngx-gallery-thumbnails/ngx-gallery-thumbnails.component';
import * as ɵngcc0 from '@angular/core';
export declare class NgxGalleryComponent implements OnInit, DoCheck, AfterViewInit {
    private myElement;
    options: NgxGalleryOptions[];
    images: NgxGalleryImage[];
    imagesReady: EventEmitter<any>;
    change: EventEmitter<{
        index: number;
        image: NgxGalleryImage;
    }>;
    previewOpen: EventEmitter<any>;
    previewClose: EventEmitter<any>;
    previewChange: EventEmitter<{
        index: number;
        image: NgxGalleryImage;
    }>;
    smallImages: string[] | SafeResourceUrl[];
    mediumImages: NgxGalleryOrderedImage[];
    bigImages: string[] | SafeResourceUrl[];
    descriptions: string[];
    links: string[];
    labels: string[];
    oldImages: NgxGalleryImage[];
    oldImagesLength: number;
    selectedIndex: number;
    previewEnabled: boolean;
    currentOptions: NgxGalleryOptions;
    private breakpoint;
    private prevBreakpoint;
    private fullWidthTimeout;
    preview: NgxGalleryPreviewComponent;
    image: NgxGalleryImageComponent;
    thubmnails: NgxGalleryThumbnailsComponent;
    width: string;
    height: string;
    left: string;
    constructor(myElement: ElementRef);
    ngOnInit(): void;
    ngDoCheck(): void;
    ngAfterViewInit(): void;
    onResize(): void;
    getImageHeight(): string;
    getThumbnailsHeight(): string;
    getThumbnailsMarginTop(): string;
    getThumbnailsMarginBottom(): string;
    openPreview(index: number): void;
    onPreviewOpen(): void;
    onPreviewClose(): void;
    selectFromImage(index: number): void;
    selectFromThumbnails(index: number): void;
    show(index: number): void;
    showNext(): void;
    showPrev(): void;
    canShowNext(): boolean;
    canShowPrev(): boolean;
    previewSelect(index: number): void;
    moveThumbnailsRight(): void;
    moveThumbnailsLeft(): void;
    canMoveThumbnailsRight(): boolean;
    canMoveThumbnailsLeft(): boolean;
    private resetThumbnails;
    private select;
    private checkFullWidth;
    private setImages;
    private setBreakpoint;
    private sortOptions;
    private setOptions;
    private combineOptions;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxGalleryComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxGalleryComponent, "ngx-gallery", never, { "options": "options"; "images": "images"; }, { "imagesReady": "imagesReady"; "change": "change"; "previewOpen": "previewOpen"; "previewClose": "previewClose"; "previewChange": "previewChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWdhbGxlcnkuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm5neC1nYWxsZXJ5LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25Jbml0LCBEb0NoZWNrLCBBZnRlclZpZXdJbml0LCBFdmVudEVtaXR0ZXIsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU2FmZVJlc291cmNlVXJsIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XHJcbmltcG9ydCB7IE5neEdhbGxlcnlPcHRpb25zIH0gZnJvbSAnLi9uZ3gtZ2FsbGVyeS1vcHRpb25zJztcclxuaW1wb3J0IHsgTmd4R2FsbGVyeUltYWdlIH0gZnJvbSAnLi9uZ3gtZ2FsbGVyeS1pbWFnZS5tb2RlbCc7XHJcbmltcG9ydCB7IE5neEdhbGxlcnlPcmRlcmVkSW1hZ2UgfSBmcm9tICcuL25neC1nYWxsZXJ5LW9yZGVyZWQtaW1hZ2UubW9kZWwnO1xyXG5pbXBvcnQgeyBOZ3hHYWxsZXJ5UHJldmlld0NvbXBvbmVudCB9IGZyb20gJy4vbmd4LWdhbGxlcnktcHJldmlldy9uZ3gtZ2FsbGVyeS1wcmV2aWV3LmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IE5neEdhbGxlcnlJbWFnZUNvbXBvbmVudCB9IGZyb20gJy4vbmd4LWdhbGxlcnktaW1hZ2Uvbmd4LWdhbGxlcnktaW1hZ2UuY29tcG9uZW50JztcclxuaW1wb3J0IHsgTmd4R2FsbGVyeVRodW1ibmFpbHNDb21wb25lbnQgfSBmcm9tICcuL25neC1nYWxsZXJ5LXRodW1ibmFpbHMvbmd4LWdhbGxlcnktdGh1bWJuYWlscy5jb21wb25lbnQnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOZ3hHYWxsZXJ5Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBEb0NoZWNrLCBBZnRlclZpZXdJbml0IHtcclxuICAgIHByaXZhdGUgbXlFbGVtZW50O1xyXG4gICAgb3B0aW9uczogTmd4R2FsbGVyeU9wdGlvbnNbXTtcclxuICAgIGltYWdlczogTmd4R2FsbGVyeUltYWdlW107XHJcbiAgICBpbWFnZXNSZWFkeTogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICBjaGFuZ2U6IEV2ZW50RW1pdHRlcjx7XHJcbiAgICAgICAgaW5kZXg6IG51bWJlcjtcclxuICAgICAgICBpbWFnZTogTmd4R2FsbGVyeUltYWdlO1xyXG4gICAgfT47XHJcbiAgICBwcmV2aWV3T3BlbjogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICBwcmV2aWV3Q2xvc2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgcHJldmlld0NoYW5nZTogRXZlbnRFbWl0dGVyPHtcclxuICAgICAgICBpbmRleDogbnVtYmVyO1xyXG4gICAgICAgIGltYWdlOiBOZ3hHYWxsZXJ5SW1hZ2U7XHJcbiAgICB9PjtcclxuICAgIHNtYWxsSW1hZ2VzOiBzdHJpbmdbXSB8IFNhZmVSZXNvdXJjZVVybFtdO1xyXG4gICAgbWVkaXVtSW1hZ2VzOiBOZ3hHYWxsZXJ5T3JkZXJlZEltYWdlW107XHJcbiAgICBiaWdJbWFnZXM6IHN0cmluZ1tdIHwgU2FmZVJlc291cmNlVXJsW107XHJcbiAgICBkZXNjcmlwdGlvbnM6IHN0cmluZ1tdO1xyXG4gICAgbGlua3M6IHN0cmluZ1tdO1xyXG4gICAgbGFiZWxzOiBzdHJpbmdbXTtcclxuICAgIG9sZEltYWdlczogTmd4R2FsbGVyeUltYWdlW107XHJcbiAgICBvbGRJbWFnZXNMZW5ndGg6IG51bWJlcjtcclxuICAgIHNlbGVjdGVkSW5kZXg6IG51bWJlcjtcclxuICAgIHByZXZpZXdFbmFibGVkOiBib29sZWFuO1xyXG4gICAgY3VycmVudE9wdGlvbnM6IE5neEdhbGxlcnlPcHRpb25zO1xyXG4gICAgcHJpdmF0ZSBicmVha3BvaW50O1xyXG4gICAgcHJpdmF0ZSBwcmV2QnJlYWtwb2ludDtcclxuICAgIHByaXZhdGUgZnVsbFdpZHRoVGltZW91dDtcclxuICAgIHByZXZpZXc6IE5neEdhbGxlcnlQcmV2aWV3Q29tcG9uZW50O1xyXG4gICAgaW1hZ2U6IE5neEdhbGxlcnlJbWFnZUNvbXBvbmVudDtcclxuICAgIHRodWJtbmFpbHM6IE5neEdhbGxlcnlUaHVtYm5haWxzQ29tcG9uZW50O1xyXG4gICAgd2lkdGg6IHN0cmluZztcclxuICAgIGhlaWdodDogc3RyaW5nO1xyXG4gICAgbGVmdDogc3RyaW5nO1xyXG4gICAgY29uc3RydWN0b3IobXlFbGVtZW50OiBFbGVtZW50UmVmKTtcclxuICAgIG5nT25Jbml0KCk6IHZvaWQ7XHJcbiAgICBuZ0RvQ2hlY2soKTogdm9pZDtcclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xyXG4gICAgb25SZXNpemUoKTogdm9pZDtcclxuICAgIGdldEltYWdlSGVpZ2h0KCk6IHN0cmluZztcclxuICAgIGdldFRodW1ibmFpbHNIZWlnaHQoKTogc3RyaW5nO1xyXG4gICAgZ2V0VGh1bWJuYWlsc01hcmdpblRvcCgpOiBzdHJpbmc7XHJcbiAgICBnZXRUaHVtYm5haWxzTWFyZ2luQm90dG9tKCk6IHN0cmluZztcclxuICAgIG9wZW5QcmV2aWV3KGluZGV4OiBudW1iZXIpOiB2b2lkO1xyXG4gICAgb25QcmV2aWV3T3BlbigpOiB2b2lkO1xyXG4gICAgb25QcmV2aWV3Q2xvc2UoKTogdm9pZDtcclxuICAgIHNlbGVjdEZyb21JbWFnZShpbmRleDogbnVtYmVyKTogdm9pZDtcclxuICAgIHNlbGVjdEZyb21UaHVtYm5haWxzKGluZGV4OiBudW1iZXIpOiB2b2lkO1xyXG4gICAgc2hvdyhpbmRleDogbnVtYmVyKTogdm9pZDtcclxuICAgIHNob3dOZXh0KCk6IHZvaWQ7XHJcbiAgICBzaG93UHJldigpOiB2b2lkO1xyXG4gICAgY2FuU2hvd05leHQoKTogYm9vbGVhbjtcclxuICAgIGNhblNob3dQcmV2KCk6IGJvb2xlYW47XHJcbiAgICBwcmV2aWV3U2VsZWN0KGluZGV4OiBudW1iZXIpOiB2b2lkO1xyXG4gICAgbW92ZVRodW1ibmFpbHNSaWdodCgpOiB2b2lkO1xyXG4gICAgbW92ZVRodW1ibmFpbHNMZWZ0KCk6IHZvaWQ7XHJcbiAgICBjYW5Nb3ZlVGh1bWJuYWlsc1JpZ2h0KCk6IGJvb2xlYW47XHJcbiAgICBjYW5Nb3ZlVGh1bWJuYWlsc0xlZnQoKTogYm9vbGVhbjtcclxuICAgIHByaXZhdGUgcmVzZXRUaHVtYm5haWxzO1xyXG4gICAgcHJpdmF0ZSBzZWxlY3Q7XHJcbiAgICBwcml2YXRlIGNoZWNrRnVsbFdpZHRoO1xyXG4gICAgcHJpdmF0ZSBzZXRJbWFnZXM7XHJcbiAgICBwcml2YXRlIHNldEJyZWFrcG9pbnQ7XHJcbiAgICBwcml2YXRlIHNvcnRPcHRpb25zO1xyXG4gICAgcHJpdmF0ZSBzZXRPcHRpb25zO1xyXG4gICAgcHJpdmF0ZSBjb21iaW5lT3B0aW9ucztcclxufVxyXG4iXX0=