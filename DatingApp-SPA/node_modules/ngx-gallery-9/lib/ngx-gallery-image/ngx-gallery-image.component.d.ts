import { OnInit, OnChanges, EventEmitter, ElementRef, SimpleChanges } from '@angular/core';
import { NgxGalleryOrderedImage } from '../ngx-gallery-ordered-image.model';
import { NgxGalleryAction } from '../ngx-gallery-action.model';
import { DomSanitizer, SafeStyle } from '@angular/platform-browser';
import { NgxGalleryHelperService } from '../ngx-gallery-helper.service';
import * as ɵngcc0 from '@angular/core';
export declare class NgxGalleryImageComponent implements OnInit, OnChanges {
    private sanitization;
    private elementRef;
    private helperService;
    images: NgxGalleryOrderedImage[];
    clickable: boolean;
    selectedIndex: number;
    arrows: boolean;
    arrowsAutoHide: boolean;
    swipe: boolean;
    animation: string;
    size: string;
    arrowPrevIcon: string;
    arrowNextIcon: string;
    autoPlay: boolean;
    autoPlayInterval: number;
    autoPlayPauseOnHover: boolean;
    infinityMove: boolean;
    lazyLoading: boolean;
    actions: NgxGalleryAction[];
    descriptions: string[];
    showDescription: boolean;
    bullets: boolean;
    onClick: EventEmitter<any>;
    onActiveChange: EventEmitter<any>;
    canChangeImage: boolean;
    private timer;
    constructor(sanitization: DomSanitizer, elementRef: ElementRef, helperService: NgxGalleryHelperService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    onMouseEnter(): void;
    onMouseLeave(): void;
    reset(index: number): void;
    getImages(): NgxGalleryOrderedImage[];
    startAutoPlay(): void;
    stopAutoPlay(): void;
    handleClick(event: Event, index: number): void;
    show(index: number): void;
    showNext(): boolean;
    showPrev(): void;
    setChangeTimeout(): void;
    canShowNext(): boolean;
    canShowPrev(): boolean;
    getSafeUrl(image: string): SafeStyle;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxGalleryImageComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxGalleryImageComponent, "ngx-gallery-image", never, { "arrows": "arrows"; "selectedIndex": "selectedIndex"; "images": "images"; "clickable": "clickable"; "arrowsAutoHide": "arrowsAutoHide"; "swipe": "swipe"; "animation": "animation"; "size": "size"; "arrowPrevIcon": "arrowPrevIcon"; "arrowNextIcon": "arrowNextIcon"; "autoPlay": "autoPlay"; "autoPlayInterval": "autoPlayInterval"; "autoPlayPauseOnHover": "autoPlayPauseOnHover"; "infinityMove": "infinityMove"; "lazyLoading": "lazyLoading"; "actions": "actions"; "descriptions": "descriptions"; "showDescription": "showDescription"; "bullets": "bullets"; }, { "onClick": "onClick"; "onActiveChange": "onActiveChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWdhbGxlcnktaW1hZ2UuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm5neC1nYWxsZXJ5LWltYWdlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkluaXQsIE9uQ2hhbmdlcywgRXZlbnRFbWl0dGVyLCBFbGVtZW50UmVmLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5neEdhbGxlcnlPcmRlcmVkSW1hZ2UgfSBmcm9tICcuLi9uZ3gtZ2FsbGVyeS1vcmRlcmVkLWltYWdlLm1vZGVsJztcclxuaW1wb3J0IHsgTmd4R2FsbGVyeUFjdGlvbiB9IGZyb20gJy4uL25neC1nYWxsZXJ5LWFjdGlvbi5tb2RlbCc7XHJcbmltcG9ydCB7IERvbVNhbml0aXplciwgU2FmZVN0eWxlIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XHJcbmltcG9ydCB7IE5neEdhbGxlcnlIZWxwZXJTZXJ2aWNlIH0gZnJvbSAnLi4vbmd4LWdhbGxlcnktaGVscGVyLnNlcnZpY2UnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOZ3hHYWxsZXJ5SW1hZ2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XHJcbiAgICBwcml2YXRlIHNhbml0aXphdGlvbjtcclxuICAgIHByaXZhdGUgZWxlbWVudFJlZjtcclxuICAgIHByaXZhdGUgaGVscGVyU2VydmljZTtcclxuICAgIGltYWdlczogTmd4R2FsbGVyeU9yZGVyZWRJbWFnZVtdO1xyXG4gICAgY2xpY2thYmxlOiBib29sZWFuO1xyXG4gICAgc2VsZWN0ZWRJbmRleDogbnVtYmVyO1xyXG4gICAgYXJyb3dzOiBib29sZWFuO1xyXG4gICAgYXJyb3dzQXV0b0hpZGU6IGJvb2xlYW47XHJcbiAgICBzd2lwZTogYm9vbGVhbjtcclxuICAgIGFuaW1hdGlvbjogc3RyaW5nO1xyXG4gICAgc2l6ZTogc3RyaW5nO1xyXG4gICAgYXJyb3dQcmV2SWNvbjogc3RyaW5nO1xyXG4gICAgYXJyb3dOZXh0SWNvbjogc3RyaW5nO1xyXG4gICAgYXV0b1BsYXk6IGJvb2xlYW47XHJcbiAgICBhdXRvUGxheUludGVydmFsOiBudW1iZXI7XHJcbiAgICBhdXRvUGxheVBhdXNlT25Ib3ZlcjogYm9vbGVhbjtcclxuICAgIGluZmluaXR5TW92ZTogYm9vbGVhbjtcclxuICAgIGxhenlMb2FkaW5nOiBib29sZWFuO1xyXG4gICAgYWN0aW9uczogTmd4R2FsbGVyeUFjdGlvbltdO1xyXG4gICAgZGVzY3JpcHRpb25zOiBzdHJpbmdbXTtcclxuICAgIHNob3dEZXNjcmlwdGlvbjogYm9vbGVhbjtcclxuICAgIGJ1bGxldHM6IGJvb2xlYW47XHJcbiAgICBvbkNsaWNrOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIG9uQWN0aXZlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIGNhbkNoYW5nZUltYWdlOiBib29sZWFuO1xyXG4gICAgcHJpdmF0ZSB0aW1lcjtcclxuICAgIGNvbnN0cnVjdG9yKHNhbml0aXphdGlvbjogRG9tU2FuaXRpemVyLCBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBoZWxwZXJTZXJ2aWNlOiBOZ3hHYWxsZXJ5SGVscGVyU2VydmljZSk7XHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XHJcbiAgICBvbk1vdXNlRW50ZXIoKTogdm9pZDtcclxuICAgIG9uTW91c2VMZWF2ZSgpOiB2b2lkO1xyXG4gICAgcmVzZXQoaW5kZXg6IG51bWJlcik6IHZvaWQ7XHJcbiAgICBnZXRJbWFnZXMoKTogTmd4R2FsbGVyeU9yZGVyZWRJbWFnZVtdO1xyXG4gICAgc3RhcnRBdXRvUGxheSgpOiB2b2lkO1xyXG4gICAgc3RvcEF1dG9QbGF5KCk6IHZvaWQ7XHJcbiAgICBoYW5kbGVDbGljayhldmVudDogRXZlbnQsIGluZGV4OiBudW1iZXIpOiB2b2lkO1xyXG4gICAgc2hvdyhpbmRleDogbnVtYmVyKTogdm9pZDtcclxuICAgIHNob3dOZXh0KCk6IGJvb2xlYW47XHJcbiAgICBzaG93UHJldigpOiB2b2lkO1xyXG4gICAgc2V0Q2hhbmdlVGltZW91dCgpOiB2b2lkO1xyXG4gICAgY2FuU2hvd05leHQoKTogYm9vbGVhbjtcclxuICAgIGNhblNob3dQcmV2KCk6IGJvb2xlYW47XHJcbiAgICBnZXRTYWZlVXJsKGltYWdlOiBzdHJpbmcpOiBTYWZlU3R5bGU7XHJcbn1cclxuIl19