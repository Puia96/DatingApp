import { OnChanges, EventEmitter, ElementRef, SimpleChanges } from '@angular/core';
import { SafeResourceUrl, DomSanitizer, SafeStyle } from '@angular/platform-browser';
import { NgxGalleryAction } from '../ngx-gallery-action.model';
import { NgxGalleryHelperService } from '../ngx-gallery-helper.service';
import * as ɵngcc0 from '@angular/core';
export declare class NgxGalleryThumbnailsComponent implements OnChanges {
    private sanitization;
    private elementRef;
    private helperService;
    thumbnailsLeft: string;
    thumbnailsMarginLeft: string;
    mouseenter: boolean;
    remainingCountValue: number;
    minStopIndex: number;
    images: string[] | SafeResourceUrl[];
    links: string[];
    labels: string[];
    linkTarget: string;
    columns: number;
    rows: number;
    arrows: boolean;
    arrowsAutoHide: boolean;
    margin: number;
    selectedIndex: number;
    clickable: boolean;
    swipe: boolean;
    size: string;
    arrowPrevIcon: string;
    arrowNextIcon: string;
    moveSize: number;
    order: number;
    remainingCount: boolean;
    lazyLoading: boolean;
    actions: NgxGalleryAction[];
    onActiveChange: EventEmitter<any>;
    private index;
    constructor(sanitization: DomSanitizer, elementRef: ElementRef, helperService: NgxGalleryHelperService);
    ngOnChanges(changes: SimpleChanges): void;
    onMouseEnter(): void;
    onMouseLeave(): void;
    reset(index: number): void;
    getImages(): string[] | SafeResourceUrl[];
    handleClick(event: Event, index: number): void;
    hasLink(index: number): boolean;
    moveRight(): void;
    moveLeft(): void;
    canMoveRight(): boolean;
    canMoveLeft(): boolean;
    getThumbnailLeft(index: number): SafeStyle;
    getThumbnailTop(index: number): SafeStyle;
    getThumbnailWidth(): SafeStyle;
    getThumbnailHeight(): SafeStyle;
    setThumbnailsPosition(): void;
    setDefaultPosition(): void;
    canShowArrows(): boolean;
    validateIndex(): void;
    getSafeUrl(image: string): SafeStyle;
    private getThumbnailPosition;
    private getThumbnailDimension;
    private getMaxIndex;
    private getVisibleCount;
    private getSafeStyle;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxGalleryThumbnailsComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxGalleryThumbnailsComponent, "ngx-gallery-thumbnails", never, { "selectedIndex": "selectedIndex"; "images": "images"; "links": "links"; "labels": "labels"; "linkTarget": "linkTarget"; "columns": "columns"; "rows": "rows"; "arrows": "arrows"; "arrowsAutoHide": "arrowsAutoHide"; "margin": "margin"; "clickable": "clickable"; "swipe": "swipe"; "size": "size"; "arrowPrevIcon": "arrowPrevIcon"; "arrowNextIcon": "arrowNextIcon"; "moveSize": "moveSize"; "order": "order"; "remainingCount": "remainingCount"; "lazyLoading": "lazyLoading"; "actions": "actions"; }, { "onActiveChange": "onActiveChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWdhbGxlcnktdGh1bWJuYWlscy5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsibmd4LWdhbGxlcnktdGh1bWJuYWlscy5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25DaGFuZ2VzLCBFdmVudEVtaXR0ZXIsIEVsZW1lbnRSZWYsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU2FmZVJlc291cmNlVXJsLCBEb21TYW5pdGl6ZXIsIFNhZmVTdHlsZSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xyXG5pbXBvcnQgeyBOZ3hHYWxsZXJ5QWN0aW9uIH0gZnJvbSAnLi4vbmd4LWdhbGxlcnktYWN0aW9uLm1vZGVsJztcclxuaW1wb3J0IHsgTmd4R2FsbGVyeUhlbHBlclNlcnZpY2UgfSBmcm9tICcuLi9uZ3gtZ2FsbGVyeS1oZWxwZXIuc2VydmljZSc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5neEdhbGxlcnlUaHVtYm5haWxzQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcclxuICAgIHByaXZhdGUgc2FuaXRpemF0aW9uO1xyXG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmO1xyXG4gICAgcHJpdmF0ZSBoZWxwZXJTZXJ2aWNlO1xyXG4gICAgdGh1bWJuYWlsc0xlZnQ6IHN0cmluZztcclxuICAgIHRodW1ibmFpbHNNYXJnaW5MZWZ0OiBzdHJpbmc7XHJcbiAgICBtb3VzZWVudGVyOiBib29sZWFuO1xyXG4gICAgcmVtYWluaW5nQ291bnRWYWx1ZTogbnVtYmVyO1xyXG4gICAgbWluU3RvcEluZGV4OiBudW1iZXI7XHJcbiAgICBpbWFnZXM6IHN0cmluZ1tdIHwgU2FmZVJlc291cmNlVXJsW107XHJcbiAgICBsaW5rczogc3RyaW5nW107XHJcbiAgICBsYWJlbHM6IHN0cmluZ1tdO1xyXG4gICAgbGlua1RhcmdldDogc3RyaW5nO1xyXG4gICAgY29sdW1uczogbnVtYmVyO1xyXG4gICAgcm93czogbnVtYmVyO1xyXG4gICAgYXJyb3dzOiBib29sZWFuO1xyXG4gICAgYXJyb3dzQXV0b0hpZGU6IGJvb2xlYW47XHJcbiAgICBtYXJnaW46IG51bWJlcjtcclxuICAgIHNlbGVjdGVkSW5kZXg6IG51bWJlcjtcclxuICAgIGNsaWNrYWJsZTogYm9vbGVhbjtcclxuICAgIHN3aXBlOiBib29sZWFuO1xyXG4gICAgc2l6ZTogc3RyaW5nO1xyXG4gICAgYXJyb3dQcmV2SWNvbjogc3RyaW5nO1xyXG4gICAgYXJyb3dOZXh0SWNvbjogc3RyaW5nO1xyXG4gICAgbW92ZVNpemU6IG51bWJlcjtcclxuICAgIG9yZGVyOiBudW1iZXI7XHJcbiAgICByZW1haW5pbmdDb3VudDogYm9vbGVhbjtcclxuICAgIGxhenlMb2FkaW5nOiBib29sZWFuO1xyXG4gICAgYWN0aW9uczogTmd4R2FsbGVyeUFjdGlvbltdO1xyXG4gICAgb25BY3RpdmVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgcHJpdmF0ZSBpbmRleDtcclxuICAgIGNvbnN0cnVjdG9yKHNhbml0aXphdGlvbjogRG9tU2FuaXRpemVyLCBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBoZWxwZXJTZXJ2aWNlOiBOZ3hHYWxsZXJ5SGVscGVyU2VydmljZSk7XHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcclxuICAgIG9uTW91c2VFbnRlcigpOiB2b2lkO1xyXG4gICAgb25Nb3VzZUxlYXZlKCk6IHZvaWQ7XHJcbiAgICByZXNldChpbmRleDogbnVtYmVyKTogdm9pZDtcclxuICAgIGdldEltYWdlcygpOiBzdHJpbmdbXSB8IFNhZmVSZXNvdXJjZVVybFtdO1xyXG4gICAgaGFuZGxlQ2xpY2soZXZlbnQ6IEV2ZW50LCBpbmRleDogbnVtYmVyKTogdm9pZDtcclxuICAgIGhhc0xpbmsoaW5kZXg6IG51bWJlcik6IGJvb2xlYW47XHJcbiAgICBtb3ZlUmlnaHQoKTogdm9pZDtcclxuICAgIG1vdmVMZWZ0KCk6IHZvaWQ7XHJcbiAgICBjYW5Nb3ZlUmlnaHQoKTogYm9vbGVhbjtcclxuICAgIGNhbk1vdmVMZWZ0KCk6IGJvb2xlYW47XHJcbiAgICBnZXRUaHVtYm5haWxMZWZ0KGluZGV4OiBudW1iZXIpOiBTYWZlU3R5bGU7XHJcbiAgICBnZXRUaHVtYm5haWxUb3AoaW5kZXg6IG51bWJlcik6IFNhZmVTdHlsZTtcclxuICAgIGdldFRodW1ibmFpbFdpZHRoKCk6IFNhZmVTdHlsZTtcclxuICAgIGdldFRodW1ibmFpbEhlaWdodCgpOiBTYWZlU3R5bGU7XHJcbiAgICBzZXRUaHVtYm5haWxzUG9zaXRpb24oKTogdm9pZDtcclxuICAgIHNldERlZmF1bHRQb3NpdGlvbigpOiB2b2lkO1xyXG4gICAgY2FuU2hvd0Fycm93cygpOiBib29sZWFuO1xyXG4gICAgdmFsaWRhdGVJbmRleCgpOiB2b2lkO1xyXG4gICAgZ2V0U2FmZVVybChpbWFnZTogc3RyaW5nKTogU2FmZVN0eWxlO1xyXG4gICAgcHJpdmF0ZSBnZXRUaHVtYm5haWxQb3NpdGlvbjtcclxuICAgIHByaXZhdGUgZ2V0VGh1bWJuYWlsRGltZW5zaW9uO1xyXG4gICAgcHJpdmF0ZSBnZXRNYXhJbmRleDtcclxuICAgIHByaXZhdGUgZ2V0VmlzaWJsZUNvdW50O1xyXG4gICAgcHJpdmF0ZSBnZXRTYWZlU3R5bGU7XHJcbn1cclxuIl19